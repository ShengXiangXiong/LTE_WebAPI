<?xml version="1.0" encoding="gb2312" ?>
<sqlMap xmlns="http://ibatis.apache.org/mapping" namespace="Wellcomm.Model"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="SqlMap.xsd">
<statements>
	
	<!--获取数据库表名称-->
	<select id="GetTableNames">
      		select name from sys.tables
	</select>

	<!--获取数据库表中的列名称-->
	<select id="GetAttrNames">
      		select a.name from sys.columns a where a.object_id=object_id('$tableName$')
	</select>

	<!--获取CELL属性值-->
	<select id="GETPropertyCELL" resultClass="LTE.Model.PropertyCELL" parameterClass="string">
      		select top 1 ID, CellName, CellNameChs, eNodeB, CI, Longitude, Latitude, Azimuth, AntHeight, Tilt, EARFCN, EIRP from cell where CellName = '$CellName$'
    	</select>

		<!--获取网格信息-->
		<select id="GetGroundGrids" >
		select distinct GXID, GYID, CX, CY, MinX, MinY, MaxX, MaxY, Dem from tbGridDem
		</select>
		<!-- 获取范围内的加速栅格 -->
		<select id="GetAccelerateStruct" parameterClass="Hashtable">
      select GXID,GYID,GZID,BuildingID from tbAccelerateGridBuilding where GXID between '$minGXID$' and '$maxGXID$' and GYID between '$minGYID$' and '$maxGYID$' order by GXID, GYID, GZID
    </select>
		
		<delete id="DeleteBuildingVertex">
			delete from tbBuildingVertex
		</delete>
    <select id="GetBuildingVertexOriginal" parameterClass="Hashtable">
      select a.BuildingID, a.VertexX, a.VertexY from tbBuildingVertexOriginal as a
      order by a.BuildingID, a.VIndex
    </select>

    <select id="GetBuildingVertexOriginalByBatch" parameterClass="Hashtable">
    <![CDATA[
      select BuildingID, VertexX, VertexY from tbBuildingVertexOriginal
     where BuildingID > $pageindex$ * $pagesize$ and BuildingID <= ($pageindex$+1)* $pagesize$ order by BuildingID, VIndex
     ]]>
    <!--a.BuildingID>($pageindex$ * $pagesize$) and a.BuildingID 
      ($pageindex$ * $pagesize$)
      offset ($pageindex$ * $pagesize$) rows
      fetch next $pagesize$ rows only-->
  </select>
  
		<select id="GetOneBuildingVertex" parameterClass="string">
            select a.VertexLong, a.VertexLat from tbBuildingVertex a
			where a.BuildingID = '$buildingid$' order by a.VIndex
		</select>
		<select id="GetOneBuildingHeight" parameterClass="string">
            select a.BHeight from tbBuilding a where a.BuildingID = '$buildingid$'
		</select>
		<!--删除网格表记录-->
		<delete id="DeleteGroundGrids" timeout="3000">
			delete from tbGridDem
		</delete>

    <delete id="TruncateGroundGrids">
      TRUNCATE TABLE tbGridDem
    </delete>
  
		<select id="getGridRange" parameterClass="Hashtable">
			select AreaMinLong, AreaMinLat, AreaMaxLong, AreaMaxLat, AreaMinX, AreaMinY, AreaMaxX, AreaMaxY, GGridSize, MaxGGXID, MaxGGYID, GHeight, GBaseHeight, AGridSize, AGridVSize, MaxAGXID, MaxAGYID, MinX, MinY, MinGGXID, MinGGYID, MinAGXID, MinAGYID from tbGridRange
                where id = $id$
		</select>
                <!--网格范围-->
		<insert id="insertGridRange" parameterClass="Hashtable">
			delete from tbGridRange where id = $id$
			insert into tbGridRange
			values('$id$', '$AreaMinLong$', '$AreaMinLat$', '$AreaMaxLong$','$AreaMaxLat$', '$AreaMinX$', '$AreaMinY$',
			'$AreaMaxX$', '$AreaMaxY$', '$GGridSize$', '$MaxGGXID$', '$MaxGGYID$', '$GHeight$', '$GBaseHeight$', '$AGridSize$',
			'$AGridVSize$','$MaxAGXID$', '$MaxAGYID$', '$MinX$', '$MinY$', '$MinGGXID$', '$MinGGYID$', '$MinAGXID$', '$MinAGYID$',
			'$MaxTinHeight$','$MinTinHeight$');
		</insert>

	<!--更新系数矫正经纬度范围-->
	<delete id="DeleteRayAdjRange">
		delete from tbRayAdjRange
	</delete>
	
	<insert id="insertRayAdjRange" parameterClass="Hashtable">
		insert into tbRayAdjRange
		values('$MinLon$', '$MinLat$', '$MaxLon$','$MaxLat$','$MinX$', '$MinY$', '$MaxX$','$MaxY$');
	</insert>
  
    <insert id ="gennerateTin" parameterClass="Hashtable">
      <![CDATA[
    INSERT INTO [dbo].tbTIN
           ([TINID]
           ,vertexX
           ,vertexY
           ,vertexHeight
           ,VIndex)
		select [TINID]
           ,vertexX
           ,vertexY
           ,vertexHeight-$minHeight$
           ,VIndex from tbTINOriginal 
			where TINID in(
				select distinct  TINID from TinSurroundBox 
		EXCEPT(select TINID from TinSurroundBox b where b.MaxX<$minX$ or b.MaxY<$minY$ or $maxX$<b.Minx or $maxY$<b.Miny)
		 )
     ]]>
    </insert>
  
		<!--获取GSM900小区的信息-->
		<select id="GetGSM900CellLayerData" resultClass="LTE.Model.CELL">
      		select distinct ID, eNodeB, CI, CellName, CellNameChs, x, y, AntHeight, Altitude, Azimuth, Tilt, Longitude, Latitude, EARFCN, EIRP, CoverageRadius from CELL
		</select>
		<!--获取GSM1800小区的信息-->
		<select id="GetGSM1800CellLayerData" resultClass="LTE.Model.CELL">
      		select distinct ID, eNodeB, CI, CellName, CellNameChs, Longitude, Latitude, AntHeight, Azimuth, Tilt from CELL
      		where Longitude between (select AreaMinLong from tbGridRange) and (select AreaMaxLong from tbGridRange) and Latitude between (select AreaMinLat from tbGridRange) and (select AreaMaxLat from tbGridRange)
      		and NetType = 'GSM1800';
    		</select>

		<select id="GetBaseStationLayerData">
      select distinct BtsName, Longitude, Latitude, AntHeight from CELL
      where Longitude between (select AreaMinLong from tbGridRange) and (select AreaMaxLong from tbGridRange) and Latitude between (select AreaMinLat from tbGridRange) and (select AreaMaxLat from tbGridRange)
    </select>
		<!--覆盖分析-->
		<!--单射线跟踪-->
		<select id="SingleGetCellType" parameterClass="string">
			select top 1 eNodeB, CI, NetType from CELL where CellName = '$cellname$'
		</select>
		<!--获取包含地面一点的网格-->
		<select id="Get_CrossWithGround_Grid" parameterClass="Hashtable">
			select MinLong,MinLat,MaxLong,MaxLat from tbGridDem where GXID = '$gxid$' and GYID = '$gyid$'
		</select>
		<!--获取GSM小区信息,构造CellInfo-->
		<select id="GetGSMCellInfo" parameterClass="Hashtable">
			select  Azimuth, Tilt, EIRP, x, y, AntHeight, Altitude, NetType, EARFCN from CELL where cellName = '$cellName$'
		</select>
		<!--获取GSM小区信息,构造CellInfo-->
		<select id="GetGSMCellInfoByLongLat" parameterClass="Hashtable">
			select  Azimuth, Tilt, EIRP, Longitude, Latitude, AntHeight, Altitude, NetType, EARFCN from CELL where cellName = '$cellName$'
		</select>
		<!--获取TD小区信息,构造CellInfo-->
		<select id="GetTDCellInfo" parameterClass="string">
		</select>

		<!--获取指定小区名称的网格-->
		<select id="GetSpecifiedCellGridsPre" parameterClass="Hashtable">
			select a.GXID, a.GYID, b.Minx, b.Miny, b.Maxx, b.Maxy, 
			a.ReceivedPowerdbm, 0 as PathLoss from 
			tbGridDem b,
			(select GXID, GYID, max(ReceivedPowerdbm) ReceivedPowerdbm 
			from tbGridPathloss  where eNodeB = '$eNodeB$' and CI = '$CI$' 
			group by gxid, gyid) as a(gxid, gyid, ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.gxid = b.gxid and a.gyid = b.gyid
			and a.ReceivedPowerdbm > -130
		</select>

		<select id="GetSpecifiedCellGrids" parameterClass="Hashtable">
			select a.GXID, a.GYID, b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, a.PathLoss 
			from tbGridPathloss a, tbGridDem b 
			where a.GXID = b.GXID and a.GYID = b.GYID and a.eNodeB = '$eNodeB$' 
			and a.CI = '$CI$' and a.ReceivedPowerdbm > -130
		</select>
	        
                <!--获取指定小区的网格-->
		<select id="GetSpecifiedCellGrid3DsPre" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.[Level], b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, 0 as PathLoss
			from tbGridDem b, 
			(select GXID, GYID, [Level], max(ReceivedPowerdbm) 
			from tbBuildingGridPathloss where eNodeB = '$eNodeB$' and CI = '$CI$'
			group by gxid, gyid, [Level]) as a(GXID, GYID, [Level], ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.ReceivedPowerdbm > -130
		</select>

		<select id="GetSpecifiedCellGrid3Ds" parameterClass="Hashtable">
			select a.GXID, a.GYID, b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, a.PathLoss, a.Level
			from tbBuildingGridPathloss a, tbGridDem b where a.GXID = b.GXID and a.GYID = b.GYID 
			and a.eNodeB = '$eNodeB$' and a.CI = '$CI$' and a.ReceivedPowerdbm > -130 
		</select>

		<select id="GetSpecifiedCellGrid3Ds1" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.[Level], b.CX, b.CY, a.ReceivedPowerdbm, 0 as PathLoss
			from tbGridDem b, 
			(select GXID, GYID, [Level], max(ReceivedPowerdbm) 
			from tbBuildingGridPathloss where eNodeB = '$eNodeB$' and CI = '$CI$'
			group by gxid, gyid, [Level]) as a(GXID, GYID, [Level], ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.ReceivedPowerdbm > -130
		</select>

		<select id="GetSpecifiedCellGrid3Dtops" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.[Level], b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, 0 as PathLoss
			from tbGridDem b, 
			(select GXID, GYID, [Level], max(ReceivedPowerdbm) 
			from tbBuildingGridPathloss where eNodeB = '$eNodeB$' and CI = '$CI$'
			group by gxid, gyid, [Level]) as a(GXID, GYID, [Level], ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.ReceivedPowerdbm > -130
		</select>
		
		<select id="GetSpecifiedAreaGrids" parameterClass="Hashtable">
	
			select a.GXID, a.GYID, b.Minx, b.Miny, b.Maxx, b.Maxy, 
			a.ReceivedPowerdbm, 0 as PathLoss from 
			tbGridDem b,
			(select GXID, GYID, max(ReceivedPowerdbm) ReceivedPowerdbm 
			from tbGridPathloss  where GXID between '$MinGXID$' and '$MaxGXID$' 
			and GYID between '$MinGYID$' and '$MaxGYID$'  group by gxid, gyid
			) as a(gxid, gyid, ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.gxid = b.gxid and a.gyid = b.gyid
			and a.ReceivedPowerdbm > -130
		</select>

		<select id="GetSpecifiedAreaGrid3Ds" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.[Level], b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, 0 as PathLoss
			from tbGridDem b, 
			(select GXID, GYID, [Level], max(ReceivedPowerdbm) 
			from tbBuildingGridPathloss where GXID between '$MinGXID$' and '$MaxGXID$'
			and GYID between '$MinGYID$' and '$MaxGYID$' group by gxid, gyid, [Level]) as a(GXID, GYID, [Level], ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.ReceivedPowerdbm > -130
		</select>

		<!--获取区域网格-->
		<select id="GetAreaGrids" parameterClass="Hashtable">
		
		select a.GXID, a.GYID, b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, 0 as PathLoss
		from tbGridDem b, (select GXID, GYID, max(ReceivedPowerdbm)
				   from tbGridPathloss where ci != 5
				   group by GXID, gyid) as a(gxid, gyid, receivedPowerdbm)
		where a.GXID = b.GXID and a.GYID = b.GYID 
		and a.ReceivedPowerdbm > -130 
		order by a.gxid, a.gyid

		</select>

		<select id="GetAreaGrid3Ds" parameterClass="Hashtable">
			
		select a.GXID, a.GYID, b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm, 0 as PathLoss, a.Level
		from tbGridDem b, (select GXID, GYID, Level, max(ReceivedPowerdbm)
				   from tbBuildingGridPathloss where ci != 5
				   group by GXID, gyid, Level) as a(gxid, gyid, Level, receivedPowerdbm)
		where a.GXID = b.GXID and a.GYID = b.GYID 
		and a.ReceivedPowerdbm > -130
		order by a.gxid, a.gyid
		</select>

		<select id="CoverAnalysis3D" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.[Level], a.CI, pci, b.MinX, b.MinY, b.MaxX, b.MaxY, a.ReceivedPowerdbm
			from tbGridDem b, cell,
			(select GXID, GYID, [Level], CI, max(ReceivedPowerdbm) 
			from tbBuildingGridPathloss where GXID between '$MinGXID$' and '$MaxGXID$'
			and GYID between '$MinGYID$' and '$MaxGYID$' group by gxid, gyid, [Level], CI) as a(GXID, GYID, [Level], CI, ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and cell.CI = a.ci
			and a.ReceivedPowerdbm > -130
		</select>

		<select id="CoverAnalysis" parameterClass="Hashtable">
			select a.GXID, a.GYID, a.CI, pci, b.Minx, b.Miny, b.Maxx, b.Maxy, a.ReceivedPowerdbm
			from tbGridDem b, cell,
			(select GXID, GYID, CI, max(ReceivedPowerdbm) ReceivedPowerdbm 
			from tbGridPathloss  where GXID between '$MinGXID$' and '$MaxGXID$' 
			and GYID between '$MinGYID$' and '$MaxGYID$' group by gxid, gyid, CI
			having max(ReceivedPowerdbm) > -130 ) as a(gxid, gyid, CI, ReceivedPowerdbm)
			where a.gxid = b.gxid and a.gyid = b.gyid 
			and a.gxid = b.gxid and a.gyid = b.gyid
			and cell.ci = a.ci
		</select>

		<select id="getTopGrid" parameterClass="">    
			select GXID, GYID, max(gzid) as gzid
			from tbBuildingGrid3D 
			where GXID between '$MinGXID$' and '$MaxGXID$' 
			and GYID between '$MinGYID$' and '$MaxGYID$'
			group  by GXID, gyid
    		</select>
		
		<select id="GetGridStrengthPwToSync">
			select  GXID, GYID, ReceivedPowerW, PathLoss from tbGridPathloss
		</select>
		<delete id="deleteSpecifiedCelltbGrids" parameterClass="Hashtable" timeout="600000000000000000">
			delete from tbGridPathloss where eNodeB='$eNodeB$' and CI='$CI$'
		</delete>
		<delete id="deleteSpecifiedCelltbBuildingGrid3Ds" parameterClass="Hashtable" timeout="600000000000000000">
			delete from tbBuildingGridPathloss where eNodeB='$eNodeB$' and CI='$CI$'
		</delete>
		<!--覆盖分析-->
		<select id="GetSpecifiedCellInterGrids" parameterClass="Hashtable">
			select distinct GXID,GYID,MinLong,MinLat,MaxLong,MaxLat,InterferenceValue from tbGridInterference where cellName='$cellname$' and InterCellName='$intername$'
		</select>
		<select id="GetSpecifiedCellInterGrids2" parameterClass="string">
			select distinct GXID,GYID,MinLong,MinLat,MaxLong,MaxLat,InterferenceValue from tbGridInterference where cellName='$cellname$'
		</select>

     <!-- 建筑物所在网格临时表 -->
    <delete id="DeleteBuildingGrid" timeout="3000">
	    Truncate table tbBuildingGrid3D
    </delete>

    <!-- 建筑物所在网格临时表 -->
    <delete id="tmpDeleteBuildingGrid">
      Truncate table tmp_BuildingGrid3D
    </delete>
    

    <!-- 建筑物所在加速网格正式表 -->
    <delete id="DeleteBuildingAccrelate">
      Truncate table tbAccelerationGridBuildingOverlap
    </delete>
    
    
    <delete id="DeleteBuildingAccrelate1">
      Truncate table tbAccelerateGridBuilding
    </delete>

    <insert id ="InsertBuildingAccelerate1" parameterClass="hashtable">
     	insert into tbAccelerateGridBuilding
	select distinct gxid ,gyid, ceiling((buildingheight+BAltitude)/30.0) gzid, buildingid 
        from  tbAccelerationGridBuildingOverlap
    </insert>
    <update id="UpdateBuildingAccelerate2">
	update tbAccelerateGridBuilding set gzid = 3 where gzid>3;
    </update>
    <insert id="InsertBuildingAccelerate3">
        insert into tbAccelerateGridBuilding
	select gxid, gyid, 2 gzid, buildingid from tbAccelerateGridBuilding where gzid=3
    </insert>
    <insert id="InsertBuildingAccelerate4">
	insert into tbAccelerateGridBuilding
	select gxid, gyid, 1 gzid, buildingid from tbAccelerateGridBuilding where gzid=2
    </insert>

    <!-- 建筑物所在加速网格临时表 -->
    <delete id="tmpDeleteBuildingAccrelate">
      Truncate table tmp_accelerate
    </delete>
    <delete id="tmpDeleteBuildingAccrelate1">
      Truncate table tmp_accelerateGridBuilding
    </delete>
    <insert id ="tmpInsertBuildingAccelerate1" parameterClass="hashtable">
     	insert into tmp_accelerateGridBuilding
	select distinct gxid ,gyid, ceiling(buildingheight/30.0) gzid, 	buildingid 
        from  tmp_accelerate
    </insert>
    <update id="tmpUpdateBuildingAccelerate2">
	update tmp_accelerateGridBuilding set gzid = 3 where gzid>3
    </update>
    <insert id="tmpInsertBuildingAccelerate3">
        insert into tmp_accelerateGridBuilding
	select gxid, gyid, 2 gzid, buildingid from tmp_accelerateGridBuilding where gzid=3
    </insert>
    <insert id="tmpInsertBuildingAccelerate4">
	insert into tmp_accelerateGridBuilding
	select gxid, gyid, 1 gzid, buildingid from tmp_accelerateGridBuilding where gzid=2
    </insert>

	<!--tbDT-->
  <!-- 更新路测数据   -->
    <update id="UpdateDT">
		update tbDTData
		set RecePowerDbm = tbGridPathloss.ReceivedPowerdbm
		from tbDTData, tbGridPathloss
		where tbDTData.gxid = tbGridPathloss.GXID
		and tbDTData.gyid = tbGridPathloss.GYID
	</update>

	<!--tbDT-->
    <!-- 更新路测数据1-->
    <update id="UpdateDT1">
		update tbDTData
		set RecePowerDbm = a.recePower
		from tbDTData, (select gxid, gyid,  MAX(ReceivedPowerdbm) from tbGridPathloss
		group by GXID, gyid) as a(gxid, gyid, recePower)
		where tbDTData.gxid = a.GXID
		and tbDTData.gyid = a.GYID
	</update>

	<!--tbDT-->
    <update id="UpdateDT2">
		update tbDTData
		set RecePowerDbm = -130
		where RecePowerDbm = 0;
	</update>

	<!--tbDT-->
    <!-- 获得路测数据，用于显示  -->
    <select id="getDTdisplay" parameterClass="">
		select distinct tbDTData.gxid, tbDTData.gyid, MinX, MinY, MaxX, MaxY, a.RecePower
		from tbDTData, tbGridDem, (select gxid, gyid, MAX(recepowerDbm) as recepower
		from tbDTData
		where gxid = tbDTData.gxid and gyid = tbDTData.gyid
		group by gxid, gyid) as a
		where tbDTData.gxid = tbGridDem.GXID
		and tbDTData.gyid = tbGridDem.GYID
		and tbDTData.gxid = a.gxid
		and tbDTData.gyid = a.gyid
		--and roadid = 0
	</select>

	<!--tbDT-->
    <!-- 获得路测数据-->
    <select id="getDT" parameterClass="Hashtable">
		select distinct tbDTData.gxid, tbDTData.gyid, id, roadid, tbDTData.x, tbDTData.y, tbDTData.longtitude, tbDTData.latitude, a.RecePowerDbm
		from tbDTData,(select gxid, gyid, MAX(recepowerDbm) as RecePowerDbm
		from tbDTData
		where gxid = tbDTData.gxid and gyid = tbDTData.gyid
		group by gxid, gyid) as a
		where tbDTData.gxid = a.gxid
		and tbDTData.gyid = a.gyid
		and roadid between $RoadID1$ and $RoadID2$
		order by id
	</select>

	<!--tbDT-->
    <select id="getDT1" parameterClass="Hashtable">
		select *
		from tbDTData
		order by id
	</select>

	<!--tbDT-->
    <delete id="DeleteDT">
		delete from tbDTData
	</delete>

    <!-- 获得道路数据-->
    <select id="GetStreet" parameterClass="Hashtable">      
	select * 
	from tbRoad
	where streetX between '$minX$' and '$maxX$' 
	and streetY between '$minY$' and '$maxY$'
	order by roadID, pointID
    </select>

    <select id="GetNear" parameterClass="Hashtable">      
	select * from tbRoad
	where streetX between '$minX$' and '$maxX$' 
	and streetY between '$minY$' and '$maxY$'
	order by roadID, pointid
    </select>

    <select id="GetNear1" parameterClass="Hashtable">      
	select * from tbSubRoad
	where x between '$minX$' and '$maxX$' 
	and y between '$minY$' and '$maxY$'
        and roadID != '$roadID$'
	order by roadID, pointid
    </select>


    <select id="GetAllStreet" parameterClass="Hashtable">      
	select * from tbRoad
	order by roadID, pointid
    </select>

    <select id="GetAllSubStreet" parameterClass="Hashtable">      
	select * from tbSubRoad
	order by roadID, pointid
    </select>

    <select id="GetSubNear" parameterClass="Hashtable">      
	select roadID, pointid from tbSubRoad
	where x between '$minX$' and '$maxX$' 
	and y between '$minY$' and '$maxY$'
        and roadID != '$roadID$'
	order by roadID, pointid
    </select>

    <select id="GetSubNear1" parameterClass="Hashtable">      
	select distinct roadid, x, y, pointgid from tbSubRoad
	where x between '$minX$' and '$maxX$' 
	and y between '$minY$' and '$maxY$'
	and PointGID >= 0
    </select>


    <delete id="DeleteSubRoad">
	delete from tbSubRoad
    </delete>


    <select id="GetDbmByGrid" parameterClass="Hashtable">      
	select max(ReceivedPowerdbm) as ReceivedPowerdbm
	from tbGridPathloss
	where gxid = $gxid$ and gyid = $gyid$
    </select>


    <select id="GetFork" parameterClass="">       
	select distinct x, y from tbSubRoad
	where PointGID >= 0
    </select>

    <select id="getBuildingVertexSmooth" parameterClass="Hashtable">
      <![CDATA[
      select tbBuildingVertex.BuildingID, VertexX, VertexY, BHeight, BAltitude, VIndex
      from tbBuildingVertex, tbBuilding
      where tbBuilding.BuildingID > $pageindex$ * $pagesize$ and tbBuilding.BuildingID <= ($pageindex$+1)* $pagesize$ and tbBuildingVertex.BuildingID = tbBuilding.BuildingID
        order by tbBuildingVertex.BuildingID, Vindex
        ]]>
    </select>
  
  <select id="getBuildingVertexSmooth1" parameterClass="">
    select tbBuildingVertex.BuildingID, Bheight, BAltitude,
    min(VertexX) as minX, min(VertexY) as minY,
    max(VertexX) as maxX, max(VertexY) as maxY
    from tbBuildingVertex, tbBuilding
    where tbBuildingVertex.BuildingID = tbBuilding.BuildingID
    and Bheight > 0
    group by tbBuildingVertex.BuildingID, BHeight, BAltitude
  </select>

    <select id="getCells" parameterClass="">    
	select distinct x, y from cell
    </select>

	<!--tbDT-->
    <select id="GetDTgrids" parameterClass="">    
	select gxid, gyid from tbdtData
    </select>

	<!--tbDT-->
	<select id="GetDTGridsOfACell" parameterClass="HashTable">
		select x,y from tbdtData
		where CI=$CI$
		and SCell_Dist between 0 and $radius$
	</select>

	<!--tbDT-->
	<select id="GetAllDTGridsOfACell" parameterClass="HashTable">
		select x,y from tbdtData
		where cellIndex=$cellIndex$
	</select>

	<select id="getAllCells" parameterClass="">  
	select * from cell order by id
    </select>
    
    <delete id="deleteAllCells">
	      delete from cell
    </delete>

    <select id="GetMaxRayID" parameterClass="">    
	      select max(trajID) as id from tbRayAdj
    </select>

     <select id="GetMaxRayLocID" parameterClass="HashTable">    
	      select max(trajID) as id from tbRayLoc
        where cellid = $cellid$
    </select>

    <!-- 获取范围内的空间网格 -->
	<select id="GetBuildingGrid3D1" parameterClass="HashTable">
	select BuildingID, GXID,GYID,GZID 
	from tbBuildingGrid3D b
	where   ($x1$-b.GXID)*($y2$-b.GYID)-($x2$ - b.GXID)*($y1$-b.GYID) > 0
	and     ($x2$-b.GXID)*($y3$-b.GYID)-($x3$ - b.GXID)*($y2$-b.GYID) > 0
	and     ($x3$-b.GXID)*($y4$-b.GYID)-($x4$ - b.GXID)*($y3$-b.GYID) > 0
	and     ($x4$-b.GXID)*($y1$-b.GYID)-($x1$ - b.GXID)*($y4$-b.GYID) > 0
	order by BuildingID, GXID, GYID, GZID
	</select>
	
	<select id="GetBuildingGrid3D" parameterClass="HashTable">
           	 select BuildingID, GXID,GYID,GZID from tbBuildingGrid3D where GXID between '$minGXID$' and '$maxGXID$' and GYID 
	between '$minGYID$' and '$maxGYID$' order by BuildingID, GXID, GYID, GZID
      	</select>

	<select id="GetBuildingCenter" parameterClass="Hashtable">
	select distinct a.BuildingID, a.BCenterX, a.BCenterY, a.BHeight, a.BAltitude 
	from tbBuilding a, tbBuildingGrid3D b 
	where a.BuildingID = b.BuildingID
	and ($x1$-b.GXID)*($y2$-b.GYID)-($x2$ - b.GXID)*($y1$-b.GYID) > 0
	and ($x2$-b.GXID)*($y3$-b.GYID)-($x3$ - b.GXID)*($y2$-b.GYID) > 0
	and ($x3$-b.GXID)*($y4$-b.GYID)-($x4$ - b.GXID)*($y3$-b.GYID) > 0
	and ($x4$-b.GXID)*($y1$-b.GYID)-($x1$ - b.GXID)*($y4$-b.GYID) > 0
	</select>

	<select id="GetBuildingVertex" parameterClass="HashTable">
        select a.BuildingID, a.VertexX, a.VertexY from tbBuildingVertex a
	where a.BuildingID in 
	(
		select distinct b.BuildingID from tbBuildingGrid3D b 
		where  	    ($x1$-b.GXID)*($y2$-b.GYID)-($x2$ - b.GXID)*($y1$-b.GYID) > 0
			and ($x2$-b.GXID)*($y3$-b.GYID)-($x3$ - b.GXID)*($y2$-b.GYID) > 0
			and ($x3$-b.GXID)*($y4$-b.GYID)-($x4$ - b.GXID)*($y3$-b.GYID) > 0
			and ($x4$-b.GXID)*($y1$-b.GYID)-($x1$ - b.GXID)*($y4$-b.GYID) > 0
	)
	</select>

	<select id="getBuildingTopVertex" parameterClass="Hashtable">      
	select BuildingID, tbGridDem.CX, tbGridDem.CY
	from tbGridDem, tbBuildingGrid3D b
	where gzid = 1
	and tbGridDem.GXID = b.GXID 
	and tbGridDem.GYID = b.GYID
	and ($x1$-b.GXID)*($y2$-b.GYID)-($x2$ - b.GXID)*($y1$-b.GYID) > 0
	and ($x2$-b.GXID)*($y3$-b.GYID)-($x3$ - b.GXID)*($y2$-b.GYID) > 0
	and ($x3$-b.GXID)*($y4$-b.GYID)-($x4$ - b.GXID)*($y3$-b.GYID) > 0
	and ($x4$-b.GXID)*($y1$-b.GYID)-($x1$ - b.GXID)*($y4$-b.GYID) > 0
	group by BuildingID, tbGridDem.CX, tbGridDem.CY 
    	</select>

	<select id="getGroundGridsCenter" parameterClass="Hashtable">
		select GXID, GYID, CX, CY, Dem from tbGridDem b
		where ($x1$-b.GXID)*($y2$-b.GYID)-($x2$ - b.GXID)*($y1$-b.GYID) > 0
		and ($x2$-b.GXID)*($y3$-b.GYID)-($x3$ - b.GXID)*($y2$-b.GYID) > 0
		and ($x3$-b.GXID)*($y4$-b.GYID)-($x4$ - b.GXID)*($y3$-b.GYID) > 0
		and ($x4$-b.GXID)*($y1$-b.GYID)-($x1$ - b.GXID)*($y4$-b.GYID) > 0
	</select>

	<select id="GetBuildingGrid3DPre" parameterClass="HashTable">
            	select BuildingID, GXID,GYID,GZID from tbBuildingGrid3D 
	where GXID between '$minGXID$' and '$maxGXID$' 
	and GYID between '$minGYID$' and '$maxGYID$' 
	order by BuildingID, GXID, GYID, GZID
	</select>

	<select id="GetBuildingCenterPre" parameterClass="HashTable">
           	 select distinct a.BuildingID, a.BCenterX, a.BCenterY, a.BHeight, a.BAltitude 
	from tbBuilding a, tbBuildingGrid3D b 
	where a.BuildingID = b.BuildingID 
	and b.GXID between '$minGXID$' and '$maxGXID$' 
	and b.GYID between '$minGYID$' and '$maxGYID$'
	</select>

  <select id="GetBuildingCenterByArea" parameterClass="HashTable">
    select distinct BuildingID, BCenterX, BCenterY, BHeight, BAltitude
    from tbBuilding
    where BCenterX between $minGX$ and $maxGX$
    and BCenterY between $minGY$ and $maxGY$
  </select>
  
	<select id="GetBuildingVertexPre" parameterClass="HashTable">
            	   select a.BuildingID, a.VertexX, a.VertexY from tbBuildingVertex a
	    where a.BuildingID in 
	    (
		select distinct b.BuildingID from tbBuildingGrid3D b where b.GXID between '$minGXID$' and '$maxGXID$' 
		and b.GYID between '$minGYID$' and '$maxGYID$'
	    )
	   order by a.BuildingID, a.VIndex
	</select>

	<select id="GetAllBuildingVertex" parameterClass="">
            	   select BuildingID, VertexX, VertexY, VIndex
	   from tbBuildingVertex
	   order by BuildingID, VIndex
	</select>

	<select id="getBuildingTopVertexPre" parameterClass="Hashtable">      
	select BuildingID, tbGridDem.CX, tbGridDem.CY
	from tbGridDem, tbBuildingGrid3D b
	where gzid = 1
 	and b.GXID between '$minGXID$' and '$maxGXID$' 
        and b.GYID between '$minGYID$' and '$maxGYID$'
	and tbGridDem.GXID = b.GXID 
	and tbGridDem.GYID = b.GYID
	group by BuildingID, tbGridDem.CX, tbGridDem.CY 
    	</select>

	<select id="getGroundGridsCenterPre" parameterClass="Hashtable">
		select GXID, GYID, CX, CY, Dem from tbGridDem
		where GXID between '$minGXID$' and '$maxGXID$' and GYID between '$minGYID$' and '$maxGYID$'
	</select>

	<select id="getPwrGround" parameterClass="Hashtable">
	    select * from tbGridPathloss where ci = $CI$
	    order by gxid, gyid
	</select>

	<select id="getPwrBuilding" parameterClass="Hashtable">
	    select * from tbBuildingGridPathloss where ci = $CI$
	    order by gxid, gyid, level
	</select>

	<delete id="deleteSpecifiedReRay" parameterClass="Hashtable">
		delete from tbReRay where ci = $CI$
    	</delete>
	
	<select id="getReRay" parameterClass="Hashtable">
	    select * from tbReRay
	</select>

	<select id="getUser" parameterClass="Hashtable">
	    select * from userInfo
	    where USERNAME = '$name$' and PASSWORD= '$pwd$'
	</select>

	<delete id="DeleteDefect">
		delete from tbDefect
	</delete>

	<select id="getDefect" parameterClass="Hashtable">
		select tbDefect.GXID, tbDefect.GYID, tbDefect.GZID, 
		MinX, MinY, MaxX, MaxY, ReceivedPowerdbm
		from tbGridDem b, tbDefect
		where type = $type$
		and tbDefect.GXID between $minGXID$ and $maxGXID$
		and tbDefect.GYID between  $minGYID$ and $maxGYID$
		and tbDefect.GXID = b.GXID 
		and tbDefect.GYID = b.GYID 
	</select>

	<!-- 用于系数矫正的轨迹信息 -->
	<select id="getRaysInAdjRange" parameterClass="">
		SELECT *
		FROM tbRayAdj
		where cellID in (
		SELECT CI
		FROM CELL
		where Longitude between (select MinLon from tbRayAdjRange) and (select MaxLon from tbRayAdjRange)
		and Latitude between (select MinLat from tbRayAdjRange) and (select MaxLat from tbRayAdjRange)
		)
		order by trajID,rayLevel
	</select>

	<!-- 用于系数校正的部分轨迹信息 -->
	<select id="getSomeRaysByModInAdjRange" parameterClass="Hashtable">
		select *
		from tbRayAdj
		where cellID in (
		SELECT CI
		FROM CELL
		where Longitude between (select MinLon from tbRayAdjRange) and (select MaxLon from tbRayAdjRange)
		and Latitude between (select MinLat from tbRayAdjRange) and (select MaxLat from tbRayAdjRange)
		)
		and gxid % $mod$ = 0
		order by trajID,rayLevel
	</select>

	<!--获得轨迹对应的小区集合-->
	<select id="getRayAdjCells" >
		SELECT distinct cellID
		FROM tbRayAdj
	</select>

	<select id="getRayAdjNum" parameterClass="">
		select count(*) from tbRayAdj
	</select>

	<!--tbDT-->
	<!--获得所有路测xy坐标及信号强度-->
	<select id="getCellDT" parameterClass="">
		select *
		from tbDTData
	</select>

	<!--tbDT-->
	<select id="getCellDTInAdjRangeOverNegative100" parameterClass="">
		select *
		from tbDTData
		where RSRP>-100 and ci is not null
		and Lon between (select MinLon from tbRayAdjRange) and (select MaxLon from tbRayAdjRange)
		and Lat between (select MinLat from tbRayAdjRange) and (select MaxLat from tbRayAdjRange)
	</select>

	<!--tbDT-->
	<select id="getDTNum" parameterClass="">
		select count(*) from tbDTData
	</select>

	<!--tbDT-->
	<!--获得所选区域内所有有路测点的主小区名，jin-->
	<select id="getAreaDTMainCellName" parameterClass="">
		select CellName
		from Cell
		where cellName in(
		select distinct CellName
		from tbDTData
		where Lon between (select MinLon from tbRayAdjRange) and (select MaxLon from tbRayAdjRange)
		and Lat between (select MinLat from tbRayAdjRange) and (select MaxLat from tbRayAdjRange)
		and CI is not null
		)
		order by CellName
	</select>

	<!--获得tbRayAdj表中所有轨迹的对应的小区名-->
	<select id="getRayAdjCellNames" parameterClass="">
		select CellName,CI,CoverageRadius
		from Cell
		where CI in(
		select distinct CellID
		from tbRayAdj
		)
		order by CellName
	</select>

	<!--tbDT-->
	<!--获得每个小区路测数据条数-->
	<select id="getDtCntOfCell" parameterClass="">
		SELECT cellName,count(*) as cnt
		FROM tbDTData
		group by cellName
		order by cnt
	</select>

	<!-- 路测数据 -->
	<select id="getAtuData" parameterClass=""> 
		select CellID,RSRP,Longitude,Latitude 
		from dbo.tbATUData group by Longitude,Latitude,CellID,RSRP 
		order by CellID,Longitude,Latitude 
	</select>

  <select id="getAccelerateGrids" parameterClass="">
    select * from tbAccelerateGridBuilding
  </select>

	<!--网格范围-->
	<insert id="insertATUDATA" parameterClass="Hashtable"> 
		delete from tbPreATU insert into tbPreATU(gxid, gyid, CellID, AllRsrp，maxRSRP，NumofAtu，avgRSRP, Scen) values('$gxid$', '$gyid$', '$CellID$', '$AllRsrp$','$maxRSRP$', '$NumofAtu$', '$avgRSRP$', '$Scen$'); 
	</insert>

	<delete id="DeleteInfSource">
		delete from tbInfSource
	</delete>

	<delete id="DeleteRays">
		delete from tbRayAdj
	</delete>

  <delete id="DeleteAccrelateGridScene">
    delete from tbAccelerateGridScene
  </delete>

  <select id="getAGridZ" parameterClass="">
    select min(gzid), max(gzid) from tbAccelerateGridBuilding
  </select>

  <select id="getAdjCoeff" parameterClass="">
	  select * from tbBestAdjCoefficient
  </select>

  <select id="GetAgridScene" parameterClass="HashTable">
    select GXID,GYID,GZID,Scene from tbAccelerateGridScene where GXID between '$minGXID$' and '$maxGXID$' and GYID between '$minGYID$' and '$maxGYID$' order by GXID, GYID, GZID
  </select>

	<select id="GetAllGridScene">
		select GXID,GYID,GZID,Scene from tbAccelerateGridScene where scene!=0 order by GXID, GYID, GZID
	</select>

  <delete id="DeleteAdjCoefficient">
    delete from tbAdjCoefficient
  </delete>
  
  <select id="GetInfSource" parameterClass="">
    select x, y, z from tbInfSource
  </select>

   <delete id="DeleteInfArea">
    delete from tbInfArea
  </delete>

   <select id="getTIN" parameterClass="">
    select TINID, VertexX, VertexY, VertexHeight
    from tbTIN
    order by TINID, vindex
  </select>

   <delete id="DeleteAccrelateTIN">
    delete from tbAccelerateGridTIN
   </delete>
   
  <delete id="TruncateTIN" timeout="3000">
    TRUNCATE TABLE tbTIN
  </delete>

  <delete id="TruncateAccelerateGridTIN" timeout="3000">
    TRUNCATE TABLE tbAccelerateGridTIN
  </delete>

   <!-- 获取范围内的加速栅格中的 TIN -->
    <select id="GetAccelerateStructTIN" parameterClass="HashTable">
	select GXID,GYID,GZID,TINID from tbAccelerateGridTIN 
	where GXID between $minGXID$ and $maxGXID$
	and GYID between $minGYID$  and $maxGYID$
	order by GXID, GYID, GZID
    </select>

   <select id="GetTINVertexOriginal" parameterClass="HashTable">
	select a.* from tbTINOriginal a
	where a.TINID in 
	(
		select distinct b.TINID from tbTINOriginal b where b.VertexX between $minX$ and $maxX$ 
		and b.VertexY between $minY$ and $maxY$
	)
	order by a.TINID, a.VIndex 
    </select>

  <select id="GetTINVertexByArea" parameterClass="HashTable">
  <![CDATA[
  select distinct * from tbTIN where Tinid in (
	select distinct  TINID from TinSurroundBox 
		EXCEPT(select TINID from TinSurroundBox b where b.MaxX<$minX$ or b.MaxY<$minY$ or $maxX$<b.Minx or $maxY$<b.Miny)
	) order by TINID, VIndex
  ]]>
  </select>

  <select id="GetTINVertexByGrid" parameterClass="HashTable">
    <![CDATA[
  select distinct * from tbTIN where Tinid in (
	select distinct  TINID from TinSurroundBox 
		EXCEPT(select TINID from TinSurroundBox b where b.MaxX<$minX$+$minXGrid$*30 or b.MaxY<$minY$+$minYGrid$*30 or $minX$+($maxXGrid$+1)*30<b.Minx or $minY$+($maxYGrid$+1)*30<b.Miny)
	) order by TINID, VIndex
  ]]>
  </select>
  
    <select id="GetTINVertex" parameterClass="HashTable">
	select a.TINID, a.VertexX, a.VertexY, a.VertexHeight from tbTIN a
	where a.TINID in 
	(
		select distinct b.TINID from tbTIN b where b.VertexX between $minX$ and $maxX$ 
		and b.VertexY between $minY$ and $maxY$
	)
	order by a.TINID, a.VIndex 
    </select>

    <select id="GetMinHeight" parameterClass="HashTable">
	select MIN(vertexHeight) 
	from tbTINOriginal
    </select>
    
    <delete id="DeleteTIN">
    	delete from tbTIN
   </delete>

    <select id="GetAllTIN" parameterClass="">
	select * from tbTIN
	order by TINID, VIndex
    </select>

    <select id="getBuilding" parameterClass="">
	select * from tbBuilding
    </select>
  
  <select id="getBuildingByArea" parameterClass="HashTable">
    select * from tbBuilding where BCenterX between $minGX$ and $maxGX$
    and BCenterY between $minGY$ and $maxGY$
  </select>

     <delete id="DeleteBuilding">
    	delete from tbBuilding
   </delete>

  <delete id="DeleteBuildingByArea" parameterClass="HashTable">
    delete from tbBuilding where BCenterX between $minGX$ and $maxGX$
    and BCenterY between $minGY$ and $maxGY$
  </delete>

  <select id="getBuildingInfo" parameterClass="">
    select tbBuilding.BuildingID, VertexX, VertexY, BHeight, BAltitude
    from tbBuilding, tbBuildingVertexOriginal
    where tbBuilding.BuildingID = tbBuildingVertexOriginal.BuildingID
    order by tbBuilding.BuildingID, tbBuildingVertexOriginal.VIndex
  </select>

  <select id="getAdjCoeff1" parameterClass="">
    select max(Scene) from tbAccelerateGridScene
  </select>
	
	<!--获得tin高度值最大值最小值, by JinHj-->
	<select id="getMaxTinHeight" parameterClass="">
		select max(vertexHeight) as MaxTinHeight
		from tbTINOriginal
	</select>
	<select id="getMinTinHeight" parameterClass="">
		select min(vertexHeight) as MinTinHeight
		from tbTINOriginal
	</select>

	<!--获得由天线波瓣导致的功率损失-->
	<select id="getLoss" parameterClass="HashTable">
		select Loss from tbGain
		where GainType = '$gainType$' and Direction = $direction$ and Degree = $degree$
	</select>

  <!--获取路测信息，用于路测信息填充-->
  <select id="SelectTbDTData">
    select ID,Lon,Lat,PCI
    from tbDTData
    where Lon between 118.401 and 119.192 and  Lat between 31.2864 and 32.5508
  </select>
  <select id="SelectTbDTInf">
    select ID,Lon,Lat,PCI
    from tbDTInf
    where Lon between 118.401 and 119.192 and  Lat between 31.2864 and 32.5508
  </select>
  <select id="SelectTbDTNoInf">
    select ID,Lon,Lat,PCI
    from tbDTNoInf
    where Lon between 118.401 and 119.192 and  Lat between 31.2864 and 32.5508
  </select>
  <delete id="deleteNousetbDTData" parameterClass="Hashtable">
    delete from tbDTData
    where ID is null or Lon is null or Lat is null or PCI is null
  </delete>
  <delete id="deleteNousetbDTInf" parameterClass="Hashtable">
    delete from tbDTInf
    where ID is null or Lon is null or Lat is null or PCI is null
  </delete>
  <delete id="deleteNousetbDTNoInf" parameterClass="Hashtable">
    delete from tbDTNoInf
    where ID is null or Lon is null or Lat is null or PCI is null
  </delete>
  <delete id="deletetbtmpDTData" parameterClass="Hashtable">
    delete from tbtmpDTData
  </delete>

  <!--获取cell表信息-->
  <select id="SelectCellInfo">
    select CellID,Longitude,Latitude,eNodeB,PCI
    from CELL
  </select>

  <!--路测数据批量更新相关操作，包含借助临时表批量表更新，临时表删除-->
  <update id="UpdatetbDTDataByTmp">
    update tbDTData
    set tbDTData.x = tbtmpDTData.x,
    tbDTData.y=tbtmpDTData.y,
    tbDTData.eNodeBID = tbtmpDTData.eNodeBID,
    tbDTData.CellID=tbtmpDTData.CellID,
    tbDTData.SCell_Dist = tbtmpDTData.SCell_Dist
    from tbDTData,tbtmpDTData
    where tbDTData.ID = tbtmpDTData.ID
  </update>

  <update id="UpdatetbDTNoInfByTmp">
    update tbDTNoInf
    set tbDTNoInf.x = tbtmpDTData.x,
    tbDTNoInf.y=tbtmpDTData.y,
    tbDTNoInf.eNodeBID = tbtmpDTData.eNodeBID,
    tbDTNoInf.CellID=tbtmpDTData.CellID,
    tbDTNoInf.SCell_Dist = tbtmpDTData.SCell_Dist
    from tbDTNoInf,tbtmpDTData
    where tbDTNoInf.ID = tbtmpDTData.ID
  </update>
  <update id="UpdatetbDTInfByTmp">
    update tbDTInf
    set tbDTInf.x = tbtmpDTData.x,
    tbDTInf.y=tbtmpDTData.y,
    tbDTInf.eNodeBID = tbtmpDTData.eNodeBID,
    tbDTInf.CellID=tbtmpDTData.CellID,
    tbDTInf.SCell_Dist = tbtmpDTData.SCell_Dist
    from tbDTInf,tbtmpDTData
    where tbDTInf.ID = tbtmpDTData.ID
  </update>
  <!--更新扇区，防止全部写入内存导致溢出-->
  <update id="UpdatetbDTDataByCell">
    update tbDTData
    set tbDTData.BtsName=CELL.BtsName,
    tbDTData.CellName = CELL.CellName,
    tbDTData.CI = CELL.CI
    from tbDTData,CELL
    where tbDTData.eNodeBID = CELL.eNodeB and tbDTData.CellID = CELL.CellID
  </update>

  <update id="UpdatetbDTInfByCell">
    update tbDTInf
    set tbDTInf.BtsName=CELL.BtsName,
    tbDTInf.CellName = CELL.CellName,
    tbDTInf.CI = CELL.CI
    from tbDTInf,CELL
    where tbDTInf.eNodeBID = CELL.eNodeB and tbDTInf.CellID = CELL.CellID
  </update>

  <update id="UpdatetbDTNoInfByCell">
    update tbDTNoInf
    set tbDTNoInf.BtsName=CELL.BtsName,
    tbDTNoInf.CellName = CELL.CellName,
    tbDTNoInf.CI = CELL.CI
    from tbDTNoInf,CELL
    where tbDTNoInf.eNodeBID = CELL.eNodeB and tbDTNoInf.CellID = CELL.CellID
  </update>
  <!--网外干扰定位选点相关-->
  <select id="GetDTSet" parameterClass="Hashtable">
    select ID,Lon,Lat, RSRP
    from tbDTData
    where  RSRP>$RSRP$ and BtsName='$BtsName$' and 3000>SCell_Dist
    order by RSRP desc
  </select>
  <!--网外干扰定位选点相关-->
  <select id="GettbUINTF" parameterClass="Hashtable">
    select ID,Lon,Lat, RSRP
    from tbUINTF
    where  RSRP>$RSRP$ and InfName='$InfName$'
    order by RSRP desc
  </select>
  <select id="GetVirSourceAllInfo" parameterClass="Hashtable">
    select * from tbVirSource
    where CellName = '$cellname$'
  </select>
  <delete id="deletbSelectedPoint" parameterClass="Hashtable">
    delete from tbSelectedPoints
    where fromName = '$fromName$'
  </delete>
  <select id ="GetSource" parameterClass="Hashtable">
    select TOP(1) Longitude,Latitude,x,y,Altitude,AntHeight,Tilt,EIRP,CI,EARFCN,eNodeB,NetType
    from CELL
    where BtsName = '$BtsName$'
  </select>

  <delete id="deletbLocResult" parameterClass="Hashtable">
    delete from tbLocResults where Version = '$Version$'
  </delete>
  <!--插入到设定的干扰源表中tbVirSource-->
  <insert id="insertVirSource" parameterClass="Hashtable">
    insert into tbVirSource
    values('$CellName$', '$Longitude$', '$Latitude$', '$x$','$y$', '$z$', '$Altitude$',
    '$AntHeight$', '$Tilt$', '$EIRP$', '$NetType$', '$CI$', '$EARFCN$', '$eNodeB$');
  </insert>
  <select id="GettbSource" parameterClass="Hashtable">
    select avg(x) as x,avg(y) as y
    from CELL
    where BtsName = '$BtsName$'
    group by BtsName
  </select>
  <select id = "GetSelectedPoint" parameterClass="Hashtable">
    SELECT  *
    FROM  tbSelectedPoints
    where fromName = '$fromName$'
  </select>
  <update id="UpdatetbSelectedPointByCI" parameterClass="Hashtable">
    update tbSelectedPoints
    set tbSelectedPoints.Azimuth=$Azimuth$
    where CI =$CI$  and fromName = '$fromName$'
  </update>
  <delete id="deletetbRayLoc" parameterClass="Hashtable">
    delete from tbRayLoc
    where cellid in (select distinct CI from tbSelectedPoints where fromName = '$fromName$' )
  </delete>
  <!--网外干扰定位定位相关-->
  <select id="GetRayLoc" parameterClass="Hashtable">
    select *  from tbRayLoc
    where cellid in (select distinct CI from tbSelectedPoints where fromName = '$fromName$' )
  </select>
  <!--显示一个路测点ci对应射线跟踪信息相关的数据库语句-->
  <select id ="GetRaylocByCI" parameterClass="Hashtable">
    select cellID,trajID,rayLevel
    ,rayStartPointX
    ,rayStartPointY
    ,rayStartPointZ
    ,rayEndPointX
    ,rayEndPointY
    ,rayEndPointZ
    ,rayType
    ,attenuation
    from tbRayLoc
    where cellid = $CI$
  </select>

  <insert id ="insShp" parameterClass="Hashtable">
    INSERT INTO [dbo].[tbShpLayer] (IndexName,ShpName,Type,DateTime)
    VALUES (#IndexName#,#ShpName#,#Type#,#DateTime#)
  </insert>

  <select id = "getShpByIndexName" parameterClass="string">
    SELECT  ShpName FROM  tbShpLayer
    where IndexName = #IndexName# and type = 'GroundCover'
  </select>
  
  <select id = "getAreaShpByLonLat" parameterClass="Hashtable">
    <![CDATA[
      SELECT  ShpName FROM  tbAreaShpLayer
      where not ( MinLongitude>$maxLongitude$ or MaxLongitude<$minLongitude$ 
                  or MinLatitude>$maxLatitude$ or MaxLatitude<$minLatitude$)
                  and type in ($type$)
    ]]>
  </select>

  

  <select id = "getNotComputedCellByArea" parameterClass="Hashtable">
    <!--SELECT  CellName,x,y,CoverageRadius FROM  CELL
    where x between $minX and $maxX and y between $minY and $maxY-->

    SELECT  distinct CellName,x,y,CoverageRadius FROM  CELL a
    where x between $minX$ and $maxX$ and y between $minY$ and $maxY$ and CoverageRadius is not null
    and not Exists( select ci from tbGridPathloss b where a.CI=b.CI)
  </select>
  
<!--获取渔网位置-->
    <select id="GetFishnetPosition">
                select fileindex from tbDataPosition where filetype='fishnet'
    </select>

    <!--获取渔网覆盖范围和栅格大小-->
    <select id="GetFishnetRange">
                select AreaMinX,AreaMinY,AreaMaxX,AreaMaxY,AGridSize from tbGridRange where id=1
    </select>

    <!--获取建筑物图层文件位置-->
    <select id="GetBuildingPosition">
                select fileindex from tbDataPosition where filetype='building'
    </select>

    <!--获取建筑物叠加结果图层文件位置-->
    <select id="GetBuildingOverlayPosition">
                select fileindex from tbDataPosition where filetype='building_overlay'
    </select>

    <!--批量更新建筑物叠加结果-->
    <update id="UpdatetbAccelerateGridBuildingByTmp">
                  update tbAccelerateGridScene1
                  set tbAccelerateGridScene1.BuildingRatio=tbAccelerateGridSceneTmpBuilding.BuildingRatio
                  from tbAccelerateGridScene1,tbAccelerateGridSceneTmpBuilding
                  where tbAccelerateGridScene1.GXID=tbAccelerateGridSceneTmpBuilding.GXID
                  and tbAccelerateGridScene1.GYID=tbAccelerateGridSceneTmpBuilding.GYID
    </update>

    <!--删除更新建筑物数据使用的临时表中的数据-->
    <delete id="DeletetbAccelerateGridSceneTmpBuilding">
	 delete from tbAccelerateGridSceneTmpBuilding
    </delete>

    <!--获取水面图层文件位置-->
    <select id="GetWaterPosition">
                select fileindex from tbDataPosition where filetype='water'
    </select>

    <!--获取水面叠加结果图层文件位置-->
    <select id="GetWaterOverlayPosition">
                select fileindex from tbDataPosition where filetype='water_overlay'
    </select>

    <!--批量更新水面叠加结果-->
    <update id="UpdatetbAccelerateGridWaterByTmp">
                  update tbAccelerateGridScene1
                  set tbAccelerateGridScene1.WaterRatio=tbAccelerateGridSceneTmpWater.WaterRatio
                  from tbAccelerateGridScene1,tbAccelerateGridSceneTmpWater
                  where tbAccelerateGridScene1.GXID=tbAccelerateGridSceneTmpWater.GXID
                  and tbAccelerateGridScene1.GYID=tbAccelerateGridSceneTmpWater.GYID
    </update>

    <!--删除更新水面数据使用的临时表中的数据-->
    <delete id="DeletetbAccelerateGridSceneTmpWater">
	 delete from tbAccelerateGridSceneTmpWater
    </delete>

    <!--获取草地图层文件位置-->
    <select id="GetGrassPosition">
                select fileindex from tbDataPosition where filetype='grass'
    </select>

    <!--获取草地叠加结果图层文件位置-->
    <select id="GetGrassOverlayPosition">
                select fileindex from tbDataPosition where filetype='grass_overlay'
    </select>

    <!--批量更新草地叠加结果-->
    <update id="UpdatetbAccelerateGridGrassByTmp">
                  update tbAccelerateGridScene1
                  set tbAccelerateGridScene1.GrassRatio=tbAccelerateGridSceneTmpGrass.GrassRatio
                  from tbAccelerateGridScene1,tbAccelerateGridSceneTmpGrass
                  where tbAccelerateGridScene1.GXID=tbAccelerateGridSceneTmpGrass.GXID
                  and tbAccelerateGridScene1.GYID=tbAccelerateGridSceneTmpGrass.GYID
    </update>

    <!--删除更新草地数据使用的临时表中的数据-->
    <delete id="DeletetbAccelerateGridSceneTmpGrass">
	 delete from tbAccelerateGridSceneTmpGrass
    </delete>

    <!--聚类分析建筑物百分比查询-->
    <select id="GetBuildingRatio">
                select GXID,GYID,BuildingRatio from tbAccelerateGridScene1 
                where GZID=1 and BuildingRatio>0
    </select>

    <!-- 聚类分析建筑物扩展 -->
    <select id="GetBuildingHeight" parameterClass="HashTable">
	            select Bheight,VertexX,VertexY from tbBuilding 
				join tbBuildingVertexOriginal on tbBuilding.BuildingID=tbBuildingVertexOriginal.BuildingID 
				where Bheight> '$height$' 
				and VertexX between '$minGXID$' and '$maxGXID$' and VertexY between '$minGYID$' and '$maxGYID$' 
				and VIndex=0
	</select>

    <!--聚类分析水面百分比查询-->
    <select id="GetWaterRatio">
                select GXID,GYID,WaterRatio from tbAccelerateGridScene1 
                where GZID=1 and WaterRatio>0
    </select>

    <!--聚类分析草地百分比查询-->
    <select id="GetGrassRatio">
                select GXID,GYID,GrassRatio from tbAccelerateGridScene1 
                where GZID=1 and GrassRatio>0
    </select>

    <!--批量更新聚类结果-->
    <update id="UpdatetbAccelerateGridClusterByTmp">
                  update tbAccelerateGridScene1
                  set tbAccelerateGridScene1.Scene=tbAccelerateGridSceneTmpCluster.Scene,
                  tbAccelerateGridScene1.ClusterID=tbAccelerateGridSceneTmpCluster.ClusterID
                  from tbAccelerateGridScene1,tbAccelerateGridSceneTmpCluster
                  where tbAccelerateGridScene1.GXID=tbAccelerateGridSceneTmpCluster.GXID
                  and tbAccelerateGridScene1.GYID=tbAccelerateGridSceneTmpCluster.GYID
    </update>

    <!--删除更新聚类结果使用的临时表中的数据-->
    <delete id="DeletetbAccelerateGridSceneTmpCluster">
	 delete from tbAccelerateGridSceneTmpCluster
    </delete>

<!--获取聚类图层文件位置-->
    <select id="GetClusterPosition">
                select fileindex from tbDataPosition where filetype='cluster'
    </select>

    <!--获取聚类结果-->
    <select id="GetClusterResult">
                select GXID,GYID,Scene from tbAccelerateGridScene1
                where GZID=1
    </select>

    <!--更新前提条件表的网格划分功能状态-->
    <update id="UpdatetbDependTableGridRange">
                  update tbDependTable set State=1
                  where item='GridRange'
    </update>

    <!--网格划分功能状态查询-->
    <select id="GetGridRangeState">
                select State from tbDependTable
                where item='GridRange'
    </select>

    <!--更新前提条件表的渔网生成功能状态-->
    <update id="UpdatetbDependTableFishnetShp">
                  update tbDependTable set State=1
                  where item='FishnetShp'
    </update>

    <!--渔网生成功能状态查询-->
    <select id="GetFishnetShpState">
                select State from tbDependTable
                where item='FishnetShp'
    </select>

    <!--更新前提条件表的建筑物叠加分析功能状态-->
    <update id="UpdatetbDependTableBuilding_overlay">
                  update tbDependTable set State=1
                  where item='Building_overlaytoDB'
    </update>

    <!--更新前提条件表的水面叠加分析功能状态-->
    <update id="UpdatetbDependTableWater_overlay">
                  update tbDependTable set State=1
                  where item='Water_overlaytoDB'
    </update>

    <!--更新前提条件表的草地叠加分析功能状态-->
    <update id="UpdatetbDependTableGrass_overlay">
                  update tbDependTable set State=1
                  where item='Grass_overlaytoDB'
    </update>

    <!--建筑物叠加分析功能状态查询-->
    <select id="GetBuilding_overlayState">
                select State from tbDependTable
                where item='Building_overlaytoDB'
    </select>

    <!--水面叠加分析功能状态查询-->
    <select id="GetWater_overlayState">
                select State from tbDependTable
                where item='Water_overlaytoDB'
    </select>

    <!--草地叠加分析功能状态查询-->
    <select id="GetGrass_overlayState">
                select State from tbDependTable
                where item='Grass_overlaytoDB'
    </select>
   
    <!--更新前提条件表的聚类分析功能状态-->
    <update id="UpdatetbDependTableClustertoDB">
                  update tbDependTable set State=1
                  where item='ClustertoDB'
    </update>

    <!--聚类分析功能状态查询-->
    <select id="GetClustertoDBState">
                select State from tbDependTable
                where item='ClustertoDB'
    </select>

     <!--聚类图层功能状态查询-->
    <select id="GetClusterShpState">
                select State from tbDependTable
                where item='ClusterShp'
    </select>

    <!--矫正系数功能状态查询-->
    <select id="GetAdjcoefficienttoDBState">
                select State from tbDependTable
                where item='AdjcoefficienttoDB'
    </select>

    <!--更新前提条件表的聚类图层生成功能状态-->
    <update id="UpdatetbDependTableClusterShp">
                  update tbDependTable set State=1
                  where item='ClusterShp'
    </update>  

    <!--删除网格划分后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoGridRange">
                  update tbDependTable SET State=0 
                  where item in ('GridRange','FishnetShp','Building_overlaytoDB','Water_overlaytoDB','Grass_overlaytoDB','ClustertoDB','ClusterShp')
    </update>

    <!--删除渔网图层附带的所有数据-->
    <delete id="DeleteFishnet">
	 delete from tbAccelerateGridScene1
    </delete>

    <!--删除渔网后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoFishnet">
                  update tbDependTable SET State=0 
                  where item in ('FishnetShp','Building_overlaytoDB','Water_overlaytoDB','Grass_overlaytoDB','ClustertoDB','ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除建筑物叠加图层后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoBuilding_overlay">
                  update tbDependTable SET State=0 
                  where item in ('Building_overlaytoDB','ClustertoDB','ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除建筑物叠加图层后加速场景表的更新-->
    <update id="UpdatetbAccelerateGridSceneDuetoBuilding_overlay">
                  update tbAccelerateGridScene1 set Scene=null,ClusterID=null,BuildingRatio=null
    </update>

    <!--删除水面叠加图层后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoWater_overlay">
                  update tbDependTable SET State=0 
                  where item in ('Water_overlaytoDB','ClustertoDB','ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除水面叠加图层后加速场景表的更新-->
    <update id="UpdatetbAccelerateGridSceneDuetoWater_overlay">
                  update tbAccelerateGridScene1 set Scene=null,ClusterID=null,WaterRatio=null
    </update>

    <!--删除草地叠加图层后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoGrass_overlay">
                  update tbDependTable SET State=0 
                  where item in ('Grass_overlaytoDB','ClustertoDB','ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除草地叠加图层后加速场景表的更新-->
    <update id="UpdatetbAccelerateGridSceneDuetoGrass_overlay">
                  update tbAccelerateGridScene1 set Scene=null,ClusterID=null,GrassRatio=null
    </update>

    <!--删除聚类入库后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoClustertoDB">
                  update tbDependTable SET State=0 
                  where item in ('ClustertoDB','ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除聚类入库后加速场景表的更新-->
    <update id="UpdatetbAccelerateGridSceneDuetoClustertoDB">
                  update tbAccelerateGridScene1 set Scene=null,ClusterID=null
    </update>

    <!--删除聚类图层后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoClusterShp">
                  update tbDependTable SET State=0 
                  where item in ('ClusterShp','AdjcoefficienttoDB')
    </update>

    <!--删除矫正系数表-->
    <update id="deleteAdjcoefficient">
                  delete from tbAdjtest
    </update>

    <!--删除矫正系数后前提条件表的更新-->
    <update id="UpdatetbDependTableDuetoAdjcoefficienttoDB">
                  update tbDependTable SET State=0 
                  where item in ('AdjcoefficienttoDB')
    </update>

    <!--矫正系数后前提条件表的更新-->
    <update id="UpdatetbDependTableAdjcoefficienttoDB">
                  update tbDependTable SET State=1 
                  where item in ('AdjcoefficienttoDB')
    </update>

	<!--地面栅格相关 ，by JinHJ-->
	<select id="getGroundGridsCenterByArea" parameterClass="HashTable">
		select GXID, GYID, CX, CY, Dem
		from tbGridDem
		where CX between $minGXID$ and $maxGXID$
		and CY between $minGYID$ and $maxGYID$
	</select>

	<select id="getGroudGridsByArea" parameterClass="HashTable">
		select * from tbGridDem where CX between $minGX$ and $maxGX$
		and CY between $minGY$ and $maxGY$
	</select>

	<delete id="DeleteGroudGridsByArea" parameterClass="HashTable" timeout="600">
		delete from tbGridDem where CX between $minGX$ and $maxGX$
		and CY between $minGY$ and $maxGY$
	</delete>

	<!--获得RRU经纬度在最大范围内的小区名称-->
	<select id="getCellsInMaxArea" parameterClass="">
		SELECT CellName,CoverageRadius
		FROM CELL
		where Longitude between (select AreaMinLong from tbGridRange) and (select AreaMaxLong from tbGridRange) and Latitude between (select AreaMinLat from tbGridRange) and (select AreaMaxLat from tbGridRange)
		and Tilt is not null
		and Azimuth is not null
	</select>

	<select id="getmaxRange" parameterClass="">
		SELECT TOP (1) *
		FROM tbGridRange
	</select>

  <select id="getDTNoInf" parameterClass="">
    select ID,Lon,Lat,SINR,RSRP,CI
    from tbDTNoInf
    where RSRP is not null and SINR is not null and RSRP>-90
    order by RSRP desc
  </select>
  <select id="getDTInf" parameterClass="">
    select ID,Lon,Lat,SINR,RSRP,CI
    from tbDTInf
    where RSRP is not null and SINR is not null and RSRP>-90
    order by RSRP desc
  </select>
  <delete id="deleteNouseDTNoInf" parameterClass="">
    delete from tbDTNoInf
    where ID is null or Lon is null or Lat is null or SINR is null or RSRP is null or CI is null
  </delete>
  <delete id="deleteNouseDTInf" parameterClass="">
    delete from tbDTInf
    where ID is null or Lon is null or Lat is null or SINR is null or RSRP is null or CI is null
  </delete>

  <delete id="deleteUINTF" parameterClass="">
    delete from tbUINTF
    where InfName='$InfName$'
  </delete>

  <delete id="deleteNouseTerminalMI" parameterClass="">
    delete from tbTerminalMI
    where  Lon is null or Lat is null or SINR is null or RSRP is null or IMSI is null
  </delete>

  <select id="getTerminalMI" parameterClass="HashTable">
    select Lon,Lat,SINR,RSRP,IMSI
    from tbTerminalMI
    where isInf=$isInf$
  </select>

  <!--查询数据仿真生成的模拟路测点信号-->
  <select id="qureyMockDT" parameterClass="HashTable">
    select top $k$ GXID,GYID,ReceivedPowerdbm
    from tbGridPathloss
    where eNodeB=$eNodeB$ order by RSRP desc
  </select>

  <select id="queryDTRange" parameterClass="HashTable">
    select max(x) as maxX,max(y) as maxY,min(x) as minX,min(y) as minY
    from tbUINTF
    where InfName = '$InfName$'
  </select>

  <select id="queryTopKDT" parameterClass="HashTable">
    select top $k$ ID,x,y,RSRP
    from tbUINTF
    where InfName = '$InfName$' order by RSRP desc
  </select>

  <select id="queryCellPosById" parameterClass="HashTable">
    select x,y,Altitude+AntHeight as h
    from CELL
    where ID='$id$'
  </select>

</statements>
</sqlMap>
